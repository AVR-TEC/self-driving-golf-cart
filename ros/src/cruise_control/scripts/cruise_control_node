#!/usr/bin/python

# Cruse controller -- predictor class for speed control
# By Neil Nie & Michael Meng
# Jan, 2018
# Copyright (c), All rights reserved
#
# this node publishes to: /vehicle/dbw/cruise_cmds/

from speed_predictor import SpeedPredictor
import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
from cv_bridge import CvBridge, CvBridgeError
import tensorflow as tf
from keras.backend.tensorflow_backend import set_session

class CruiseControlNode:

    def __init__(self):

        rospy.init_node('cruise_control_node')

        self.current_frame = None
        self.bridge = CvBridge()

        simulation = rospy.get_param("/cruise_control_node/simulation")
        if (simulation):
            rospy.logwarn("You are in simulation mode. If this is unintentional, please quite the program immediately")
            rospy.Subscriber('/cv_camera_node/image_sim', Image, callback=self.image_update_callback, queue_size=8)
        else:
            rospy.Subscriber('/cv_camera_node/image_raw', Image, callback=self.image_update_callback, queue_size=8)

        # Loading deep learning model
        self.model_path = rospy.get_param("/cruise_control_node/model_path")
        self.scale_factor = rospy.get_param("/cruise_control_node/scale_factor")
        self.input_length = rospy.get_param("/cruise_control_node/length")
        input_size = (224, 224)

        # Limit tensorflow GPU memory useage.
        config = tf.ConfigProto()
        config.gpu_options.per_process_gpu_memory_fraction = rospy.get_param("/cruise_control_node/gpu_frac")
        set_session(tf.Session(config=config))

        self.predictor = SpeedPredictor(weight_path=self.model_path,
                                        model_type='rgb',
                                        input_length=self.input_length,
                                        input_size=input_size)
        rospy.loginfo("Deep Learning Model Loaded")

        speed_pub = rospy.Publisher('/vehicle/dbw/cruise_cmds/', Float32, queue_size=5)
        rate = rospy.Rate(15)

        while not rospy.is_shutdown():
            if self.current_frame is not None:
                speed_cmd = self.predictor.predict(self.current_frame)
                speed_cmd = speed_cmd * int(self.scale_factor)
                speed_pub.publish(speed_cmd)
            else:
                speed_pub.publish(-1)
            rate.sleep()

    def image_update_callback(self, data):

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            raise e
        self.current_frame = cv_image


if __name__ == "__main__":

    try:
        CruiseControlNode()
    except rospy.ROSInterruptException:
        pass