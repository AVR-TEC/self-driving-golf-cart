#!/usr/bin/python
#
# ROS node for steering controller
# publishes /dbw/steering_angle as Float64
#
# Developed & maintained by Neil Nie
# (c) Yongyang Nie, 2018, All rights Reserved
#

import cv2
from steering_predictor import SteeringPredictor
import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
from cv_bridge import CvBridge, CvBridgeError


class SteeringNode:

    def __init__(self):

        rospy.init_node('steering_node')

        self.current_frame = None
        self.bridge = CvBridge()

        rospy.Subscriber('/cv_camera_node/image_raw', Image, callback=self.image_update_callback, queue_size=8)

        self.model_path = rospy.get_param("/steering_node/model_path")
        rospy.loginfo('loading model from path: %s', self.model_path)
        self.scale_factor = rospy.get_param("/steering_node/scale_factor")
        rospy.loginfo('loaded scaling factor: %s', self.scale_factor)

        self.predictor = SteeringPredictor(weight_path=self.model_path, model_type='rgb')
        print('steering deep learning model loaded')

        steering_pub = rospy.Publisher('/vehicle/dbw/steering_cmds/', Float32, queue_size=5)
        rate = rospy.Rate(15)

        while not rospy.is_shutdown():
            if self.current_frame is not None:
                angle = self.predictor.predict(self.current_frame)
                angle = angle * int(self.scale_factor)
                steering_pub.publish(angle)
            else:
                steering_pub.publish(0)
            rate.sleep()

    def image_update_callback(self, data):

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            raise e

        self.current_frame = cv_image


if __name__ == "__main__":

    try:
        SteeringNode()
    except rospy.ROSInterruptException:
        pass