#! /usr/bin/env python
#
# Visualization node for object detection node
# (c) Yongyang (Neil) Nie, 2018
# contact@neilnie.com

from PIL import ImageDraw
import numpy as np
import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
from cv_bridge import CvBridge, CvBridgeError


class ObjectDetecionVisualization():


    def __init__(self):

        rospy.init_node('od_visualization')
        rospy.Subscriber('/cv_camera_node/image_raw', Image, callback=self.image_update_callback, queue_size=5)

        visual_pub = rospy.Publisher('/visual/detection/object_detection', Image, queue_size=5)
        rate = rospy.Rate(15)

        self.current_frame = None
        self.bridge = CvBridge()
        self.steering_angle = 0.0

        while not rospy.is_shutdown():

            if self.current_frame is not None:
                image = self.draw_bboxes(img=self.current_frame, angle_steers=self.steering_angle, speed_ms=5)
                img_msg = self.bridge.cv2_to_imgmsg(image, "bgr8")
                visual_pub.publish(img_msg)
                rate.sleep()
            else:
                rate.sleep()

        # if visualize:
        #     image = self.draw_bboxes(image, b_boxes=out_boxes, scores=out_scores, classes=out_classes)
        #     image = cv2.resize(np.array(image), (640, 480))
        #     return image
        # else:

    def image_update_callback(self, data):

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        self.current_frame = cv_image


    def draw_bboxes(self, image, b_boxes, scores, classes):

        array = np.uint8((image))
        image = Image.fromarray(array)

        # draw the bounding boxes
        for i, c in reversed(list(enumerate(classes))):

            predicted_class = self.class_names[c]
            box = b_boxes[i]
            score = scores[i]

            label = '{} {:.2f}'.format(predicted_class, score)
            draw = ImageDraw.Draw(image)
            label_size = draw.textsize(label, self.font)

            top, left, bottom, right = box
            top = max(0, np.floor(top + 0.5).astype('int32'))
            left = max(0, np.floor(left + 0.5).astype('int32'))
            bottom = min(image.size[1], np.floor(bottom + 0.5).astype('int32'))
            right = min(image.size[0], np.floor(right + 0.5).astype('int32'))

            if top - label_size[1] >= 0:
                text_origin = np.array([left, top - label_size[1]])
            else:
                text_origin = np.array([left, top + 1])

            # a good redistributable image drawing library.
            for i in range(self.thickness):
                draw.rectangle([left + i, top + i, right - i, bottom - i], outline=self.colors[c])
            draw.rectangle([tuple(text_origin), tuple(text_origin + label_size)], fill=self.colors[c])
            draw.text(text_origin, label, fill=(0, 0, 0), font=self.font)
            del draw

        return image