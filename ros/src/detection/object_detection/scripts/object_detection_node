#! /usr/bin/env python

# MIT License

# Copyright (c) 2017-2018 Yongyang Nie

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Run a YOLO_v2 style detection model test images.
This ROS node uses the object detector class to run detection.
"""


import cv2
import numpy as np
from object_detector import ObjectDetector
from PIL import Image, ImageFont

#ros
import rospy
from sensor_msgs.msg import Image
from model_data import configs
from cv_bridge import CvBridge, CvBridgeError
from object_detection.msg import DetectionResult
from object_detection.msg import DetectionResults


class ObjectDetectionNode:

    def __init__(self):

        rospy.init_node('object_detection')
        rospy.Subscriber('/cv_camera/image_raw', Image, callback=self.image_update_callback, queue_size=5)

        self.current_frame = None
        self.bridge = CvBridge()

        print("we are in")

        # TODO: Impelement these configs in the launch file
        self.model_path = configs.model_path            # rospy.get_param("/object_detection/model_path")
        self.classes_path = configs.classes_path        # rospy.get_param("/object_detection/classes_path")
        self.anchors_path = configs.anchors_path        # rospy.get_param("/object_detection/anchors_path")
        self.iou_threshold = configs.iou_threshold      # rospy.get_param("/object_detection/")
        self.score_threshold = configs.score_threshold  # rospy.get_param("/object_detection/")
        self.input_height = configs.height              # rospy.get_param("/object_detection/")
        self.input_width = configs.width                # rospy.get_param("/object_detection/")

        self.detector = ObjectDetector(model_path=self.model_path,
                                       classes_path=self.classes_path,
                                       anchors_path=self.anchors_path,
                                       score_threshold=self.score_threshold,
                                       iou_threshold=self.iou_threshold,
                                       height=self.input_height, width=self.input_width)

        detection_image_pub = rospy.Publisher('/detection/object/detection_visualization/', Image, queue_size=10)
        detection_results_pub = rospy.Publisher('/detection/object/detection_result', DetectionResults, queue_size=10)
        rate = rospy.Rate(15)

        while not rospy.is_shutdown():
            if self.current_frame is not None:
                image, out_boxes, out_scores, out_classes = self.detector.detect_object(self.current_frame, visualize=True)
                img_msg = self.bridge.cv2_to_imgmsg(image, "bgr8")
                detection_image_pub.publish(img_msg)
                msg = self.convert_results_to_message(out_boxes, out_scores, out_classes)
                detection_results_pub.publish(msg)

            rate.sleep()

    def image_update_callback(self, data):

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            raise e

        self.current_frame = cv_image

    @staticmethod
    def convert_results_to_message(out_boxes, out_scores, out_classes):

        msgs = DetectionResults()
        for i in range(len(out_scores)):
            msg = DetectionResult()
            msg.out_class = out_classes[i]
            msg.out_score = out_scores[i]
            msg.location = out_boxes[i, :]
            msgs.results.append(msg)

        return msgs


if __name__ == "__main__":

    try:
        ObjectDetectionNode()
    except rospy.ROSInterruptException:
        pass
