#!/usr/bin/python
#
# ROS node for steering controller
# publishes /dbw/steering_angle as Float64
#
# Developed & maintained by Neil Nie
# (c) Yongyang Nie, 2018, All rights Reserved
#

import numpy as np
import cv2
import models as models

import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
from cv_bridge import CvBridge, CvBridgeError


class SteeringPredictor:

    def __init__(self):

        rospy.init_node('steering_controller')
        rospy.Subscriber('/cv_camera_node/image_raw', Image, callback=self.image_update_callback, queue_size=5)

        self.current_frame = None
        self.bridge = CvBridge()
        self.model_path = rospy.get_param("/steering_controller/model_path")
        rospy.loginfo('loading model from path: %s', self.model_path)

        self.cnn = models.commaai_model()
        self.cnn.load_weights(self.model_path)
        print('steering deep learning model loaded')



        steering_pub = rospy.Publisher('/dbw/steering_angle/', Float32, queue_size=5)
        rate = rospy.Rate(15)

        while not rospy.is_shutdown() and self.current_frame is not None:
            angle = self.predict_steering(self.current_frame)
            steering_pub.publish(angle)
            rate.sleep()

    def image_update_callback(self, data):

        try:
            cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        self.current_frame = cv_image

    def predict_steering(self, image):

        input = cv2.resize(image, (320, 160))
        predicted_angle = self.cnn.predict(np.array([input]))[0][0]
        return predicted_angle


if __name__ == "__main__":

    try:
        SteeringPredictor()
    except rospy.ROSInterruptException:
        pass